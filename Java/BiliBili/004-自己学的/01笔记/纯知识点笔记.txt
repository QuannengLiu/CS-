/*

switch
	关于switch语句(8个规则)：
	
	1.switch语句也属于选择结构，也是分支语句

	2.语法结构：

	switch(int或String类型的字面值或变量){
		case int或String类型的字面值或变量:
		    java语句;
			...
			break;
		case int或String类型的字面值或变量:
		    java语句;
			...	
		    break;
		...
		defalut:
		    java语句;
			...
	}
	
	3.执行原理：
	    switch语句后的小括号当中的“数据”和case后面的“数据”进行一一匹配，匹配成功的分支执行
		按照从上而下的顺序依次进行匹配。
	
	4.break：匹配成功的分支执行，分支当中最后有“break;”语句的话，整个switch语句终止
	
	5.穿透现象：匹配成功的分支执行，分支当中没有“break;”语句的话，直接进入下一个分支执行（不进行匹配），
	这种现象被称为case穿透现象。【提供break;语句可以避免穿透】

	6.合并现象：case可以合并：
	int i=10;//i=1,2,3,10,以下分支都可以执行
	
	switch(i){
		case 1:case 2:case 3:case 10:
		System.out.println("Test Code!");
	}
	
	7.default：所有的分支都没有匹配成功，当有default语句的话，会执行default分支当中的程序。

    8.支持数据类型及其转换：switch和case后面都必须是int或者String类型的数据，不可以探测别的类型，其他数据类型会转换成int
	
	*byte、short、char也可以直接写到switch和case后面，因为他们可以进行自动类型转换成int

	*double，float，long必须加强制转化符才会转换成int，否则会报错
	
	*JDK6,switch和case只能探测int类型，JDK7及7之后的版本，引入新特性，switch和case关键字后面可以探测String类型的数据

for

	1.循环结构：
		在程序中，总有一些需要反复的、重复的执行的代码，假设没有循环结构，
		那么这段需要反复执行的代码自然需要进行重复编写。代码无法得到重复
		使用。所以多数编程语言都是支持循环结构的。将来把需要反复执行的代码
		片段放到“循环体”，再联“计数器”，共同控制这段需要反复执行的代码。
	2.基本上所有的编程语言支持的循环包括三种：
		*for循环
		*while循环
		*do...while循环
	3.当前实例主要讲解for循环。for循环的语法结构是什么呢？
		语法结构：
		for(初始化表达式;布尔表达式;更新表达式){
			//需要重复执行的代码片段【循环体：由java语句构成】
		}
	4.for循环的执行过程/执行原理？【非常重要！】【五颗星！】
        4.1.初始化表达式、布尔表达式、更新表达式都不是必须的！【但是里面的两个分号必须要有】
		4.2.初始化表达式最先执行，并且在整个for循环里只执行一次
		4.3.布尔表达式必须是true或false，不能是其他值
		4.4.for执行过程：
		
			1.先执行初始化表达式，并且该表达式只执行一次
			
			2.判断布尔表达式是否为true还是false
			
				2.1-true，执行循环体内的内容
						  执行更新表达式
				重复2，直到布尔表达式为false，循环结束
				
				2.2-false，循环结束（只能在布尔表达式处断开）
	5.for循环，初始化表达式变量的作用域仅限于在当前for循环内部使用



2021/11/14
Array(数组)

	1、Java语言中的数组是一种引用数据类型。不属于基本数据类型。数组的父类是Object。
	2、数组实际上是一个容器，可以同时容纳多个元素。（数组是一个数据的集合。）
	数组：字面意思是“一组数据”
	3、数组当中可以存储“基本数据类型”的数据，也可以存储“引用数据类型”的数据。
	4、数组因为是引用类型，所以数组对象是堆内存当中。（数组是存储在堆当中的）
	5、数组当中如果存储的是“java对象”的话，实际上存储的是对象的“引用（内存地址）”，数组中不能直接存储java对象。
	6、数组一旦创建，在java中规定，长度不可变。（数组长度不可变）
	7、数组的分类：一维数组、二维数组、三维数组、多维数组...（一维数组较多，二维数组偶尔使用！）
	8、所有的数组对象都有length属性(java自带的)，用来获取数组中元素的个数。
	9、java中的数组要求数组中元素的类型统一。比如int类型数组只能存储int类型，Person类型数组只能存储Person类型。
	例如：超市购物，购物袋中只能装苹果，不能同时装苹果和橘子。（数组中存储的元素类型统一）
	10、数组在内存方面存储的时候，数组中的元素内存地址(存储的每一个元素都是有规则的挨着排列的)是连续的。内存地址连续。
	这是数组存储元素的特点（特色）。数组实际上是一种简单的数据结构。
	11、所有的数组都是拿“第一个小方框的内存地址”作为整个数组对象的内存地址。
	（数组中首元素的内存地址作为整个数组对象的内存地址。）
	12、数组中每一个元素都是有下标的，下标从0开始，以1递增。最后一个元素的下标是：length - 1
	下标非常重要，因为我们对数组中元素进行“存取”的时候，都需要通过下标来进行。
	13、数组这种数据结构的优点和缺点是什么？
	优点：查询/查找/检索某个下标上的元素时效率极高。可以说是查询效率最高的一个数据结构。
	    为什么检索效率高？
		第一：每一个元素的内存地址在空间存储上是连续的。
		第二：每一个元素类型相同，所以占用空间大小一样。
		第三：知道第一个元素内存地址，知道每一个元素占用空间的大小，又知道下标，所以
		通过一个数学表达式就可以计算出某个下标上元素的内存地址。直接通过内存地址定位
		元素，所以数组的检索效率是最高的。

		数组中存储100个元素，或者存储100万个元素，在元素查询/检索方面，效率是相同的，
		因为数组中元素查找的时候不会一个一个找，是通过数学表达式计算出来的。（算出一个
		内存地址，直接定位的。）
	缺点：
	    第一：由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候，
	效率较低，因为随机增删元素会涉及到后面元素统一向前或者向后位移的操作。
	    第二：数组不能存储大数据量，为什么？
		因为很难在内存空间上找到一块特别大的连续的内存空间。

	注意：对于数组中最后一个元素的增删，是没有效率影响的。
	14、怎么声明/定义一个一维数组？
	语法格式：
	    int[] array1;
	    double[] array2;
	    boolean[] array3;
	    String[] array4;
	    Object[] array5;
	15、怎么初始化一个一维数组呢？
	包括两种方式：静态初始化一维数组，动态初始化一维数组。
	静态初始化语法格式：
	    int[] array = {100, 2100, 300, 55};
	动态初始化语法格式：
	    int[] array = new int[5]; // 这里的5表示数组的元素个数。
					// 初始化一个5个长度的int类型数组，每个元素默认值0
	    String[] names = new String[6]; // 初始化6个长度的String类型数组，每个元素默认值null。

	16、什么时候采用静态初始化方式，什么时候使用动态初始化方式呢？
	    当你创建数组的时候，确定数组中存储哪些具体的元素时，采用静态初始化方式。
	    当你创建数组的时候，不确定将来数组中存储哪些数据，你可以采用动态初始化的方式，预先分配内存空间。

	17、当一个方法上，参数的类型是一个数组的时候：
			法1：调用方法时传一个之前创建好的数组
			法2：调用方法时传一个现场创建好的数组

	18、一维数组的深入：
		1.数组中存储的类型为引用数据类型时：实际上只能存储java对象的“内存地址”，数组中存储的每个元素是“引用”。

	19、关于一维数组的扩容：
		1.方法：先新建一个大容量的数组，然后将小容量数组中的数据一个一个拷贝到大数组当中。
		2.数组扩容效率较低。因为涉及到拷贝的问题。所以在以后的开发中请注意：尽可能少的进行数组的拷贝。可以在创建数组对象的时候预估计以下多长合适，最好预估准确，这样可以减少数组的扩容次数。提高效率。
		3.代码：调用方法System.arraycopy();
	20、关于java中的二维数组
		1、二维数组其实是一个特殊的一维数组，特殊在这个一维数组当中的每一个元素是一个一维数组。
		2、三维数组是什么？
		三维数组是一个特殊的二维数组，特殊在这个二维数组中每一个元素是一个一维数组。
		实际的开发中使用最多的就是一维数组。二维数组也很少使用。三维数组几乎不用。
		3、二维数组静态初始化
		int[][] array = {{1,1,1},{2,3,4,5},{0,0,0,0},{2,3,4,5},{2,3,4,5},{2,3,4,5},{2,3,4,5}};

